import java.util.Arrays;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class MyArrayList<T> implements MyList<T> {
    // Array to hold the list's elements
    private Object[] elements;
    // The current number of elements in the list
    private int size;

    // Constructor initializes the list with an initial capacity
    public MyArrayList() {
        elements = new Object[10];
        size = 0;
    }

    // Ensure enough space in the array to add more elements
    private void ensureCapacity() {
        // If the current size equals the length of the array, increase capacity
        if (size >= elements.length) {
            // Double the size of the array when expanding
            Object[] newElements = new Object[size * 2];
            // Copy existing elements into the new array
            System.arraycopy(elements, 0, newElements, 0, size);
            elements = newElements;
        }
    }

    // Add an element to the end of the list
    @Override
    public void add(T item) {
        ensureCapacity();  // Check and increase capacity if necessary
        elements[size++] = item;  // Add the item and increment the size
    }

    // Get an element at a specific index
    @SuppressWarnings("unchecked")
    public T get(int index) {
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException();
        }
        return (T) elements[index];
    }

    // Set an element at a specific index
    public void set(int index, T item) {
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException();
        }
        elements[index] = item;
    }

    // Add an element at a specific index
    public void add(int index, T item) {
        if (index < 0 || index > size) {
            throw new IndexOutOfBoundsException();
        }
        ensureCapacity();  // Make sure there's enough space
        // Shift elements to the right to make space for the new element
        System.arraycopy(elements, index, elements, index + 1, size - index);
        elements[index] = item;
        size++; // number of actual elements in array
    }

    // Add an element at the start of the list
    public void addFirst(T item) {
        add(0, item);
    }

    // Add an element at the end of the list
    public void addLast(T item) {
        add(size, item);
    }

    // Get the first element of the list
    public T getFirst() {
        return get(0);
    }

    // Get the last element of the list
    public T getLast() {
        return get(size - 1);
    }

// Remove an element at a specific index
    public T remove(int index) {
        T item = get(index);
        int numMoved = size - index - 1;
        if (numMoved > 0) {
            // Shift elements to the left to fill the gap
            System.arraycopy(elements, index + 1, elements, index, numMoved);
        }
        elements[--size] = null; // Clear to let GC do its work and decrement size
        return item;
    }

    // Remove the first element of the list
    public T removeFirst() {
        return remove(0);
    }

    // Remove the last element of the list
    public T removeLast() {
        return remove(size - 1);
    }

    // Clear the list
    public void clear() {
        for (int i = 0; i < size; i++) {
            elements[i] = null;
        }
        size = 0;
    }

    // Return the number of elements in the list
    public int size() {
        return size;
    }

    // Check if the list is empty
    public boolean isEmpty() {
        return size == 0;
    }

    // Find the index of the first occurrence of an object
    public int indexOf(Object object) {
        for (int i = 0; i < size; i++)
            if (object.equals(elements[i]))
                return i;
        return -1;
    }

    // Find the index of the last occurrence of an object
    public int lastIndexOf(Object object) {
        for (int i = size - 1; i >= 0; i--)
            if (object.equals(elements[i]))
                return i;
        return -1;
    }

    // Check if the list contains a certain object
    public boolean exists(Object object) {
        return indexOf(object) >= 0;
    }

    // Convert the list to an array
    public Object[] toArray() {
        return Arrays.copyOf(elements, size);
    }

    // Sort the list using a simple bubble sort algorithm
    public void sort() {
        boolean sorted;
        do {
            sorted = true;
            for (int i = 0; i < size - 1; i++) {
                Comparable<T> ci = (Comparable<T>) elements[i];
                if (ci.compareTo((T) elements[i + 1]) > 0) {
                    Object temp = elements[i];
                    elements[i] = elements[i + 1];
                    elements[i + 1] = temp;
                    sorted = false;
                }
            }
        } while (!sorted);
    }

    // Provide an iterator for the MyArrayList
    @Override
    public Iterator<T> iterator() {
        return new Iterator<T>() {
            private int currentIndex = 0;

            @Override
            public boolean hasNext() {
                return currentIndex < size;
            }

            @Override
            @SuppressWarnings("unchecked")
            public T next() {
                if (!hasNext()) {
                    throw new NoSuchElementException();
                }
                return (T) elements[currentIndex++];
            }
        };
    }
}
